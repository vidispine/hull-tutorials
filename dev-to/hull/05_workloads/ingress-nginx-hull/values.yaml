hull:
  config:
    specific:
      rbac:
        scope: false
      defaultBackend:
        enabled: false
        existingPsp:
      controller:
        publishService:
          pathOverride: 
          enabled: true
        ingressClassResource:
          name: nginx
          enabled: true
          default: false
          controllerValue: "k8s.io/ingress-nginx"
        reportNodeInternalIp: false
        hostNetwork: false
        maxmindLicenseKey: ""
        healthCheckHost: ""
        healthCheckPath: "/healthz"
        ingressClassByName: false
        watchIngressWithoutClass: false
        enableMimalloc: true
        metrics:
          enabled: true
        customTemplate:
          configMapName: ""
          configMapKey: ""
        scope:
          enabled: false
          namespace: ""
        admissionWebhooks:
          enabled: true
          existingPsp:
          patch:
            enabled: true
          port: 8443
          certificate: "/usr/local/certificates/cert"
          key: "/usr/local/certificates/key"
        electionID: ingress-controller-leader
        existingPsp: 
        configMaps:
          controller:
            namespace: 
          tcp:
            namespace: 
            mappings: {}
          udp:
            namespace: 
            mappings: {}
      podSecurityPolicy:
        enabled: false
  objects:
    daemonset:
      controller:
        enabled: false
        revisionHistoryLimit: 10
        minReadySeconds: 0 
        pod:
          dnsPolicy: ClusterFirst
          containers:
            controller:
              image:
                registry: k8s.gcr.io
                repository: ingress-nginx/controller
                tag: "v1.0.4"
              imagePullPolicy: IfNotPresent
              lifecycle:
                preStop:
                  exec:
                    command:
                      - /wait-shutdown
              args:
              - _HT![
                    {{- $p := (index . "$") }}
                    "-/nginx-ingress-controller",
                    {{- if $p.Values.hull.config.specific.defaultBackend.enabled }}
                    "--default-backend-service=$(POD_NAMESPACE)/{{ include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "defaultbackend") }}",
                    {{- end }}
                    {{- with $p.Values.hull.config.specific.controller }}
                    {{- if .publishService.enabled }}
                    "--publish-service={{ default (include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "controller")) .publishService.pathOverride }}",
                    {{- end }}
                    "--election-id={{ .electionID }}",
                    "--controller-class={{ .ingressClassResource.controllerValue }}",
                    "--configmap={{ default "$(POD_NAMESPACE)" .configMaps.controller.namespace }}/{{ include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "controller") }}",
                    {{- if .configMaps.tcp }}
                    "--tcp-services-configmap={{ default "$(POD_NAMESPACE)" .configMaps.tcp.namespace }}/{{ include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "tcp") }}",
                    {{ end }}                    
                    {{- if .configMaps.udp }}
                    "--udp-services-configmap={{ default "$(POD_NAMESPACE)" .configMaps.udp.namespace }}/{{ include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "udp") }}",
                    {{ end }}                    
                    {{- if .scope.enabled }}
                    "--watch-namespace={{ default "$(POD_NAMESPACE)" .scope.namespace }}",
                    {{- end }}                    
                    {{- if and .reportNodeInternalIp .hostNetwork }}
                    "--report-node-internal-ip-address={{ .reportNodeInternalIp }}",
                    {{- end }}
                    {{- if .admissionWebhooks.enabled }}
                    "--validating-webhook=:{{ .admissionWebhooks.port }}",
                    "--validating-webhook-certificate={{ .admissionWebhooks.certificate }}",
                    "--validating-webhook-key={{ .admissionWebhooks.key }}",
                    {{- end }}
                    {{- if .maxMindMirror }}
                    "--healthz-host={{ .healthCheckHost }}",
                    {{- end }}
                    {{- if .maxmindLicenseKey }}
                    "--maxmind-license-key={{ .maxmindLicenseKey }}",
                    {{- end }}
                    {{- if .healthCheckHost }}
                    "--healthz-host={{ .healthCheckHost }}",
                    {{- end }}                    
                    {{- if not (eq .healthCheckPath "/healthz") }}
                    "--health-check-path={{ .Values.controller.healthCheckPath }}",
                    {{- end }}
                    {{- if .ingressClassByName }}
                    "--ingress-class-by-name=true",
                    {{- end }}
                    {{- if .watchIngressWithoutClass }}
                    "--watch-ingress-without-class=true",
                    {{- end }}
                    {{- end }}
                  ]
              securityContext:
                capabilities:
                    drop:
                    - ALL
                    add:
                    - NET_BIND_SERVICE
                runAsUser: 101
                allowPrivilegeEscalation: true
              env:
                POD_NAME:
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                POD_NAMESPACE:
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                LD_PRELOAD:
                  enabled: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.bool>>><<<CONDITION=
                    (index . "$").Values.hull.config.specific.controller.enableMimalloc>>>
                  value: /usr/local/lib/libmimalloc.so
              livenessProbe: 
                httpGet:
                  # should match container.healthCheckPath
                  path: "/healthz"
                  port: 10254
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 5
              readinessProbe:
                httpGet:
                  # should match container.healthCheckPath
                  path: "/healthz"
                  port: 10254
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              
              ports: 
                _HULL_TRANSFORMATION_:
                  NAME: hull.util.transformation.tpl
                  CONTENT: {
                      {{ if (index . "$").Values.hull.config.specific.controller.metrics.enabled }}
                      metrics: { containerPort: 10254, protocol: TCP },
                      {{ end }}
                      
                      {{ if (index . "$").Values.hull.config.specific.controller.admissionWebhooks.enabled }}
                      webhook: { containerPort: 8443, protocol: TCP },
                      {{ end }}
                      
                      {{ range $a,$b := (index . "$").Values.hull.config.specific.controller.configMaps.tcp.mappings }}
                      {{ $a }}-tcp: { containerPort: {{ printf "%s" $a }} },
                      {{ end }}
                      
                      {{ range $a,$b := (index . "$").Values.hull.config.specific.controller.configMaps.udp.mappings }}
                      {{ $a }}-udp: { containerPort: {{ printf "%s" $a }} },
                      {{ end }}
                      
                      http: { containerPort: 80, protocol: TCP },
                      
                      https: { containerPort: 443, protocol: TCP }
                    }
    deployment:
      controller:
        enabled: true
        revisionHistoryLimit: 10
        minReadySeconds: 0 
        pod:
          dnsPolicy: ClusterFirst
          containers:
            controller:
              image:
                registry: k8s.gcr.io
                repository: ingress-nginx/controller
                tag: "v1.0.4"
              imagePullPolicy: IfNotPresent
              args:
              - _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.tpl>>><<<CONTENT=
                  [
                    {{- $p := (index . "$") }}
                    "-/nginx-ingress-controller",
                    {{- if $p.Values.hull.config.specific.defaultBackend.enabled }}
                    "--default-backend-service=$(POD_NAMESPACE)/{{ include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "defaultbackend") }}",
                    {{- end }}
                    {{- with $p.Values.hull.config.specific.controller }}
                    {{- if .publishService.enabled }}
                    "--publish-service={{ default (include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "controller")) .publishService.name }}",
                    {{- end }}
                    "--election-id={{ .electionID }}",
                    "--controller-class={{ .ingressClassResource.controllerValue }}",
                    "--configmap={{ default "$(POD_NAMESPACE)" .configMaps.controller.namespace }}/{{ include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "controller") }}",
                    {{- if .configMaps.tcp }}
                    "--tcp-services-configmap={{ default "$(POD_NAMESPACE)" .configMaps.tcp.namespace }}/{{ include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "tcp") }}",
                    {{ end }}                    
                    {{- if .configMaps.udp }}
                    "--udp-services-configmap={{ default "$(POD_NAMESPACE)" .configMaps.udp.namespace }}/{{ include "hull.metadata.fullname" (dict "$_CONTEXT" $p "COMPONENT" "udp") }}",
                    {{ end }}                    
                    {{- if .scope.enabled }}
                    "--watch-namespace={{ default "$(POD_NAMESPACE)" .scope.namespace }}",
                    {{- end }}                    
                    {{- if and .reportNodeInternalIp .hostNetwork }}
                    "--report-node-internal-ip-address={{ .reportNodeInternalIp }}",
                    {{- end }}
                    {{- if .admissionWebhooks.enabled }}
                    "--validating-webhook=:{{ .admissionWebhooks.port }}",
                    "--validating-webhook-certificate={{ .admissionWebhooks.certificate }}",
                    "--validating-webhook-key={{ .admissionWebhooks.key }}",
                    {{- end }}
                    {{- if .maxmindLicenseKey }}
                    "--maxmind-license-key={{ .maxmindLicenseKey }}",
                    {{- end }}
                    {{- if .healthCheckHost }}
                    "--healthz-host={{ .healthCheckHost }}",
                    {{- end }}
                    {{- if not (eq .healthCheckPath "/healthz") }}
                    "--health-check-path={{ .Values.controller.healthCheckPath }}",
                    {{- end }}
                    {{- if .ingressClassByName }}
                    "--ingress-class-by-name=true",
                    {{- end }}
                    {{- if .watchIngressWithoutClass }}
                    "--watch-ingress-without-class=true",
                    {{- end }}
                    {{- end }}
                  ]>>>
              securityContext:
                capabilities:
                    drop:
                    - ALL
                    add:
                    - NET_BIND_SERVICE
                runAsUser: 101
                allowPrivilegeEscalation: true
              env:
                POD_NAME:
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                POD_NAMESPACE:
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                LD_PRELOAD:
                  enabled: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.bool>>><<<CONDITION=
                    (index . "$").Values.hull.config.specific.controller.enableMimalloc>>>
                  value: /usr/local/lib/libmimalloc.so
              livenessProbe: 
                httpGet:
                  # should match container.healthCheckPath
                  path: "/healthz"
                  port: 10254
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 5
              readinessProbe:
                httpGet:
                  # should match container.healthCheckPath
                  path: "/healthz"
                  port: 10254
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ports: 
                _HULL_TRANSFORMATION_:
                  NAME: hull.util.transformation.tpl
                  CONTENT: {
                      {{ if (index . "$").Values.hull.config.specific.controller.metrics.enabled }}
                      metrics: { containerPort: 10254, protocol: TCP },
                      {{ end }}
                      {{ if (index . "$").Values.hull.config.specific.controller.admissionWebhooks.enabled }}
                      webhook: { containerPort: 8443, protocol: TCP },
                      {{ end }}
                      {{ range $a,$b := (index . "$").Values.hull.config.specific.controller.configMaps.tcp.mappings }}
                      {{ $a }}-tcp: { containerPort: {{ printf "%s" $a }} },
                      {{ end }}
                      {{ range $a,$b := (index . "$").Values.hull.config.specific.controller.configMaps.udp.mappings }}
                      {{ $a }}-udp: { containerPort: {{ printf "%s" $a }} },
                      {{ end }}
                      http: { containerPort: 80, protocol: TCP },
                      https: { containerPort: 443, protocol: TCP }
                    }
              volumeMounts:
                custom:
                  enabled: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.bool>>><<<CONDITION=
                    (index . "$").Values.hull.config.specific.controller.customTemplate.configMapName>>>
                  mountPath: /etc/nginx/template
                  name: nginx-template-volume
                  readOnly: true
                webhook:
                  enabled: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.bool>>><<<CONDITION=
                    (index . "$").Values.hull.config.specific.controller.admissionWebhooks.enabled>>>
                  mountPath: /usr/local/certificates/
                  name: webhook-cert
                  readOnly: true
              terminationGracePeriodSeconds: 300
              volumes:
                custom:
                  enabled: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.bool>>><<<CONDITION=
                    (index . "$").Values.hull.config.specific.controller.customTemplate.configMapName>>>
                  configMap:
                    name: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.tpl>>><<<CONTENT={{ (index . "$").Values.hull.config.specific.controller.customTemplate.configMapName }}>>>
                    items:
                    - key: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.tpl>>><<<CONTENT={{ (index . "$").Values.hull.config.specific.controller.customTemplate.configMapKey }}>>>
                      path: nginx.tmpl
                webhook:
                  enabled: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.bool>>><<<CONDITION=
                    (index . "$").Values.hull.config.specific.controller.admissionWebhooks.enabled>>>
                  name: webhook-cert
                  secret:
                    secretName: _HULL_TRANSFORMATION_<<<NAME=hull.util.transformation.makefullname>>><<<COMPONENT=admission>>>

                